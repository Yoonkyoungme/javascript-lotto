(()=>{"use strict";const t={minLength:1,maxLength:45,winningNumbersLength:6,bonusMatchCount:5,lottoBaseTicketPrice:1e3,roundingStandard:100,restart:"y"};function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(t)}function n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,i(r.key),r)}}function i(t){var n=function(t,n){if("object"!=e(t)||!t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var r=i.call(t,"string");if("object"!=e(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==e(n)?n:String(n)}function r(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}function o(t,e,n){if(!e.has(t))throw new TypeError("attempted to "+n+" private field on non-instance");return e.get(t)}var a=new WeakMap,u=new WeakSet,s=function(){function e(t){var n,i,s,l;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,n=u),n.add(this),function(t,e,n){r(t,e),e.set(t,{writable:!0,value:void 0})}(this,a),i=this,s=a,l=function(t,e,n){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return n}(this,u,c).call(this,t),function(t,e,n){if(e.set)e.set.call(t,n);else{if(!e.writable)throw new TypeError("attempted to set read only private field");e.value=n}}(i,o(i,s,"set"),l)}var i,s;return i=e,(s=[{key:"generateLotto",value:function(){for(var e=t.winningNumbersLength,n=t.minLength,i=t.maxLength,r=new Set;r.size<e;){var o=(a=n,u=i,Math.floor(Math.random()*(u-a+1)+a));r.add(o)}var a,u;return Array.from(r).sort((function(t,e){return t-e}))}},{key:"generatedLottos",get:function(){return function(t,e){return e.get?e.get.call(t):e.value}(this,o(this,a,"get"))}}])&&n(i.prototype,s),Object.defineProperty(i,"prototype",{writable:!1}),e}();function c(t){var e=this;return Array.from({length:t},(function(){return e.generateLotto()}))}const l=s,f={three:{price:5e3,number:3},four:{price:5e4,number:4},five:{price:15e5,number:5},fiveBonus:{price:3e7,number:5},six:{price:2e9,number:6}};function h(t){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},h(t)}function d(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,m(i.key),i)}}function m(t){var e=function(t,e){if("object"!=h(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var i=n.call(t,"string");if("object"!=h(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==h(e)?e:String(e)}function v(t,e){b(t,e),e.add(t)}function b(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}function p(t,e){return function(t,e){return e.get?e.get.call(t):e.value}(t,w(t,e,"get"))}function y(t,e,n){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return n}function w(t,e,n){if(!e.has(t))throw new TypeError("attempted to "+n+" private field on non-instance");return e.get(t)}var g=new WeakMap,L=new WeakSet,S=new WeakSet,k=new WeakSet,N=new WeakSet,E=new WeakSet,T=function(){function e(t,n){var i,r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),v(this,E),v(this,N),v(this,k),v(this,S),v(this,L),r={writable:!0,value:void 0},b(this,i=g),i.set(this,r),function(t,e,n){(function(t,e,n){if(e.set)e.set.call(t,n);else{if(!e.writable)throw new TypeError("attempted to set read only private field");e.value=n}})(t,w(t,e,"set"),n)}(this,g,{three:0,four:0,five:0,fiveBonus:0,six:0}),y(this,N,R).call(this,t,n)}var n,i;return n=e,(i=[{key:"getMatchedNumbersLength",value:function(t,e){return t.filter((function(t){return e.includes(t)})).length}},{key:"isEqualBonusNumber",value:function(t,e){return e.includes(t)}},{key:"calculateTotalProfit",value:function(e){var n=y(this,E,C).call(this)/(e*t.lottoBaseTicketPrice)*.01;return Math.round(n*t.roundingStandard)/t.roundingStandard}},{key:"lottoStatistics",get:function(){return p(this,g)}}])&&d(n.prototype,i),Object.defineProperty(n,"prototype",{writable:!1}),e}();function j(t){var e=this;Object.keys(f).forEach((function(n){f[n].number===t&&p(e,g)[n]++}))}function P(t,e){this.isEqualBonusNumber(t,e)?p(this,g).fiveBonus++:p(this,g).five++}function M(e,n){var i=e.winningNumbers,r=e.bonusNumber,o=this.getMatchedNumbersLength(i,n);o!==t.bonusMatchCount?y(this,L,j).call(this,o):y(this,S,P).call(this,r,n)}function R(t,e){for(var n=0;n<e.length;n++)y(this,k,M).call(this,t,e[n])}function C(){var t=this;return Object.keys(f).reduce((function(e,n){return e+f[n].price*p(t,g)[n]}),0)}const W=T;var B={prefix:"[ERROR]",invalidDividedUnit:"Íµ¨ÏûÖ Í∏àÏï°ÏùÄ ".concat(t.lottoBaseTicketPrice,"Ïõê Îã®ÏúÑÎ°ú ÎÇòÎàÑÏñ¥ Îñ®Ïñ¥Ï†∏Ïïº Ìï©ÎãàÎã§."),invalidLength:"".concat(t.winningNumbersLength,"Í∞úÏùò Ïà´ÏûêÎ•º ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî."),invalidRange:"".concat(t.minLength," ~ ").concat(t.maxLength," ÏÇ¨Ïù¥Ïùò Ïà´ÏûêÎßå ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî."),invalidUniqueNumber:"Ï§ëÎ≥µÎêú Ïà´ÏûêÎäî ÏûÖÎ†•Ìï† Ïàò ÏóÜÏäµÎãàÎã§."};const x=function(t){return function(t){return"Ï¥ù ".concat(t,"Í∞úÎ•º Íµ¨Îß§ÌñàÏäµÎãàÎã§.")}(t)},A=function(t){return t.map((function(t){return"<li>".concat("üéüÔ∏è"," ").concat(t.join(", "),"</li>")})).join("")},O=function(t){return Object.keys(f).map((function(e){return function(t,e){var n=f[t],i=n.number,r=n.price,o="fiveBonus"===t?" + Î≥¥ÎÑàÏä§Î≥º":"";return"<tr><td>".concat(i,"Í∞ú").concat(o,"</td><td>").concat(r.toLocaleString(),"Ïõê</td><td>").concat(e,"Í∞ú</td></tr>")}(e,t[e])})).join("")},q=function(t){return"ÎãπÏã†Ïùò Ï¥ù ÏàòÏùµÎ•†ÏùÄ ".concat(t,"%ÏûÖÎãàÎã§.")};function U(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}const I={validateWinningNumbers:function(t){this.validateLength(t),this.validateUniqueNumber(t),this.validateWinningNumbersRange(t)},validateBonusNumber:function(t,e){var n;this.validateRange(e),this.validateUniqueNumber([].concat(function(t){if(Array.isArray(t))return U(t)}(n=t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(n)||function(t,e){if(t){if("string"==typeof t)return U(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?U(t,e):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[e]))},isValidLength:function(e){return e.length===t.winningNumbersLength},validateLength:function(t){if(!this.isValidLength(t))throw new Error("".concat(B.prefix," ").concat(B.invalidLength))},isValidUniqueNumber:function(t){return new Set(t).size===t.length},validateUniqueNumber:function(t){if(!this.isValidUniqueNumber(t))throw new Error("".concat(B.prefix," ").concat(B.invalidUniqueNumber))},isInRange:function(e){return e>=t.minLength&&e<=t.maxLength},validateRange:function(t){if(!this.isInRange(t))throw new Error("".concat(B.prefix," ").concat(B.invalidRange))},validateWinningNumbersRange:function(t){var e=this;t.some((function(t){return e.validateRange(t)}))}};function z(t){return document.querySelector(t)}function G(t){return G="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},G(t)}function V(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,D(i.key),i)}}function D(t){var e=function(t,e){if("object"!=G(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var i=n.call(t,"string");if("object"!=G(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==G(e)?e:String(e)}function H(t,e,n){!function(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}(t,e),e.set(t,n)}function $(t,e){return function(t,e){return e.get?e.get.call(t):e.value}(t,J(t,e,"get"))}function F(t,e,n){return function(t,e,n){if(e.set)e.set.call(t,n);else{if(!e.writable)throw new TypeError("attempted to set read only private field");e.value=n}}(t,J(t,e,"set"),n),n}function J(t,e,n){if(!e.has(t))throw new TypeError("attempted to "+n+" private field on non-instance");return e.get(t)}var K=new WeakMap,Q=new WeakMap,X=new WeakMap;new(function(){function e(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),H(this,K,{writable:!0,value:void 0}),H(this,Q,{writable:!0,value:void 0}),H(this,X,{writable:!0,value:void 0}),F(this,X,{winningNumbers:null,bonusNumber:null}),this.initEventListeners()}var n,i;return n=e,(i=[{key:"initEventListeners",value:function(){z("#close-button").addEventListener("click",this.closeModal.bind(this)),z("#modal-wrapper").addEventListener("click",this.closeModal.bind(this)),z("#lotto-purchase-form").addEventListener("submit",this.handleLottoPurchaseSubmit.bind(this)),z("#lotto-numbers-form").addEventListener("submit",this.handleLottoNumbersSubmit.bind(this)),z("#restart-button").addEventListener("click",this.handleRestartButton.bind(this))}},{key:"handleLottoPurchaseSubmit",value:function(t){t.preventDefault();var e=z("#lotto-purchase-input").value;F(this,K,this.getTicketCount(e)),this.generateLottos(),this.displayGeneratedLottoInfo(),z("#hidden-form").classList.remove("hidden-form")}},{key:"getTicketCount",value:function(e){return e/t.lottoBaseTicketPrice}},{key:"generateLottos",value:function(){var t=new l($(this,K));F(this,Q,t.generatedLottos)}},{key:"displayTicketCount",value:function(){z("#total-ticket-count").textContent=x($(this,K))}},{key:"displayGeneratedLottos",value:function(){z("#generated-lotto-contents").innerHTML=A($(this,Q))}},{key:"displayGeneratedLottoInfo",value:function(){this.displayTicketCount(),this.displayGeneratedLottos()}},{key:"handleLottoNumbersSubmit",value:function(t){t.preventDefault(),this.setLottoNumbers(),this.validateLottoNumbers()&&(this.openModal(),this.calculateAndShowResults())}},{key:"setLottoNumbers",value:function(){$(this,X).winningNumbers=Array.from((".lotto-number-input",document.querySelectorAll(".lotto-number-input"))).map((function(t){return Number(t.value)})),$(this,X).bonusNumber=Number(z("#bonus-number-input").value)}},{key:"validateLottoNumbers",value:function(){try{return I.validateWinningNumbers($(this,X).winningNumbers),I.validateBonusNumber($(this,X).winningNumbers,$(this,X).bonusNumber),!0}catch(t){alert(t.message)}}},{key:"openModal",value:function(){z("#modal-wrapper").classList.remove("hidden-modal"),z("#modal-wrapper").classList.add("modal-wrapper")}},{key:"closeModal",value:function(){z("#modal-wrapper").classList.add("hidden-modal"),z("#modal-wrapper").classList.remove("modal-wrapper")}},{key:"calculateAndShowResults",value:function(){var t=new W($(this,X),$(this,Q));this.showLottoStatistics(t)}},{key:"showLottoStatistics",value:function(t){this.showStatistics(t),this.showTotalProfit(t)}},{key:"showStatistics",value:function(t){var e=t.lottoStatistics;z("#lotto-statistics-tbody").innerHTML=O(e)}},{key:"showTotalProfit",value:function(t){var e=t.calculateTotalProfit($(this,K));z("#profit-text").textContent=q(e)}},{key:"handleRestartButton",value:function(){location.reload()}}])&&V(n.prototype,i),Object.defineProperty(n,"prototype",{writable:!1}),e}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Z2UuanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1sb3R0by8uL3NyYy9jb25zdGFudHMvbG90dG8tcnVsZXMuanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1sb3R0by8uL3NyYy9kb21haW5zL0xvdHRvR2VuZXJhdG9yLmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtbG90dG8vLi9zcmMvY29uc3RhbnRzL2xvdHRvLXN0YXRpc3RpY3MuanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1sb3R0by8uL3NyYy9kb21haW5zL0xvdHRvQ2FsY3VsYXRvci5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LWxvdHRvLy4vc3JjL3V0aWxzL2NyZWF0ZVdpbm5pbmdSZXN1bHQuanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1sb3R0by8uL3NyYy9jb25zdGFudHMvbWVzc2FnZXMuanMiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1sb3R0by8uL3NyYy92aWV3cy9PdXRwdXRXZWJWaWV3LmpzIiwid2VicGFjazovL2phdmFzY3JpcHQtbG90dG8vLi9zcmMvdmFsaWRhdG9ycy9Mb3R0b1ZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LWxvdHRvLy4vc3JjL3V0aWxzL2RvbS5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LWxvdHRvLy4vc3JjL2NvbnRyb2xsZXJzL0xvdHRvV2ViQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LWxvdHRvLy4vc3JjL3N0ZXAyLWluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG1ha2VSYW5kb21JblJhbmdlKG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkgKyBtaW4pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYWtlUmFuZG9tSW5SYW5nZTtcbiIsImNvbnN0IExPVFRPX1JVTEVTID0ge1xuICBtaW5MZW5ndGg6IDEsXG4gIG1heExlbmd0aDogNDUsXG4gIHdpbm5pbmdOdW1iZXJzTGVuZ3RoOiA2LFxuXG4gIGJvbnVzTWF0Y2hDb3VudDogNSxcblxuICBsb3R0b0Jhc2VUaWNrZXRQcmljZTogMTAwMCxcbiAgcm91bmRpbmdTdGFuZGFyZDogMTAwLFxuXG4gIHJlc3RhcnQ6ICd5Jyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExPVFRPX1JVTEVTO1xuIiwiaW1wb3J0IG1ha2VSYW5kb21JblJhbmdlIGZyb20gJy4uL3V0aWxzL21ha2VSYW5kb21JblJhbmdlLmpzJztcbmltcG9ydCBMT1RUT19SVUxFUyBmcm9tICcuLi9jb25zdGFudHMvbG90dG8tcnVsZXMuanMnO1xuXG5jbGFzcyBMb3R0b0dlbmVyYXRvciB7XG4gICNnZW5lcmF0ZWRMb3R0b3M7XG5cbiAgY29uc3RydWN0b3IodGlja2V0Q291bnQpIHtcbiAgICB0aGlzLiNnZW5lcmF0ZWRMb3R0b3MgPSB0aGlzLiNnZW5lcmF0ZUxvdHRvc0J5VGlja2V0Q291bnQodGlja2V0Q291bnQpO1xuICB9XG5cbiAgZ2VuZXJhdGVMb3R0bygpIHtcbiAgICBjb25zdCB7IHdpbm5pbmdOdW1iZXJzTGVuZ3RoLCBtaW5MZW5ndGgsIG1heExlbmd0aCB9ID0gTE9UVE9fUlVMRVM7XG4gICAgY29uc3QgbG90dG9TZXQgPSBuZXcgU2V0KCk7XG5cbiAgICB3aGlsZSAobG90dG9TZXQuc2l6ZSA8IHdpbm5pbmdOdW1iZXJzTGVuZ3RoKSB7XG4gICAgICBjb25zdCByYW5kb21OdW1iZXIgPSBtYWtlUmFuZG9tSW5SYW5nZShtaW5MZW5ndGgsIG1heExlbmd0aCk7XG4gICAgICBsb3R0b1NldC5hZGQocmFuZG9tTnVtYmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmZyb20obG90dG9TZXQpLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgfVxuXG4gICNnZW5lcmF0ZUxvdHRvc0J5VGlja2V0Q291bnQodGlja2V0Q291bnQpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh7IGxlbmd0aDogdGlja2V0Q291bnQgfSwgKCkgPT4gdGhpcy5nZW5lcmF0ZUxvdHRvKCkpO1xuICB9XG5cbiAgZ2V0IGdlbmVyYXRlZExvdHRvcygpIHtcbiAgICByZXR1cm4gdGhpcy4jZ2VuZXJhdGVkTG90dG9zO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvdHRvR2VuZXJhdG9yO1xuIiwiY29uc3QgTE9UVE9fU1RBVElTVElDUyA9IHtcbiAgdGhyZWU6IHtcbiAgICBwcmljZTogNV8wMDAsXG4gICAgbnVtYmVyOiAzLFxuICB9LFxuICBmb3VyOiB7XG4gICAgcHJpY2U6IDUwXzAwMCxcbiAgICBudW1iZXI6IDQsXG4gIH0sXG4gIGZpdmU6IHtcbiAgICBwcmljZTogMV81MDBfMDAwLFxuICAgIG51bWJlcjogNSxcbiAgfSxcbiAgZml2ZUJvbnVzOiB7XG4gICAgcHJpY2U6IDMwXzAwMF8wMDAsXG4gICAgbnVtYmVyOiA1LFxuICB9LFxuICBzaXg6IHtcbiAgICBwcmljZTogMl8wMDBfMDAwXzAwMCxcbiAgICBudW1iZXI6IDYsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBMT1RUT19TVEFUSVNUSUNTO1xuIiwiaW1wb3J0IExPVFRPX1NUQVRJU1RJQ1MgZnJvbSAnLi4vY29uc3RhbnRzL2xvdHRvLXN0YXRpc3RpY3MuanMnO1xuaW1wb3J0IExPVFRPX1JVTEVTIGZyb20gJy4uL2NvbnN0YW50cy9sb3R0by1ydWxlcy5qcyc7XG5jbGFzcyBMb3R0b0NhbGN1bGF0b3Ige1xuICAjbG90dG9TdGF0aXN0aWNzO1xuXG4gIGNvbnN0cnVjdG9yKGxvdHRvTnVtYmVycywgZ2VuZXJhdGVkTG90dG9zKSB7XG4gICAgdGhpcy4jbG90dG9TdGF0aXN0aWNzID0ge1xuICAgICAgdGhyZWU6IDAsXG4gICAgICBmb3VyOiAwLFxuICAgICAgZml2ZTogMCxcbiAgICAgIGZpdmVCb251czogMCxcbiAgICAgIHNpeDogMCxcbiAgICB9O1xuICAgIHRoaXMuI2NhbGN1bGF0ZUFsbExvdHRvU3RhdGlzdGljcyhsb3R0b051bWJlcnMsIGdlbmVyYXRlZExvdHRvcyk7XG4gIH1cblxuICBnZXRNYXRjaGVkTnVtYmVyc0xlbmd0aCh3aW5uaW5nTnVtYmVycywgZ2VuZXJhdGVkTG90dG8pIHtcbiAgICByZXR1cm4gd2lubmluZ051bWJlcnMuZmlsdGVyKCh3aW5uaW5nTnVtYmVyKSA9PlxuICAgICAgZ2VuZXJhdGVkTG90dG8uaW5jbHVkZXMod2lubmluZ051bWJlciksXG4gICAgKS5sZW5ndGg7XG4gIH1cblxuICBpc0VxdWFsQm9udXNOdW1iZXIoYm9udXNOdW1iZXIsIGdlbmVyYXRlZExvdHRvKSB7XG4gICAgcmV0dXJuIGdlbmVyYXRlZExvdHRvLmluY2x1ZGVzKGJvbnVzTnVtYmVyKTtcbiAgfVxuXG4gICNpbmNyZWFzZU1hdGNoZWROdW1iZXIobnVtYmVyKSB7XG4gICAgT2JqZWN0LmtleXMoTE9UVE9fU1RBVElTVElDUykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoTE9UVE9fU1RBVElTVElDU1trZXldLm51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuI2xvdHRvU3RhdGlzdGljc1trZXldKys7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAjaW5jcmVhc2VNYXRjaGVkRml2ZU9yQm9udXNOdW1iZXIoYm9udXNOdW1iZXIsIGdlbmVyYXRlZExvdHRvKSB7XG4gICAgaWYgKHRoaXMuaXNFcXVhbEJvbnVzTnVtYmVyKGJvbnVzTnVtYmVyLCBnZW5lcmF0ZWRMb3R0bykpIHtcbiAgICAgIHRoaXMuI2xvdHRvU3RhdGlzdGljcy5maXZlQm9udXMrKztcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4jbG90dG9TdGF0aXN0aWNzLmZpdmUrKztcbiAgfVxuXG4gICNjYWxjdWxhdGVMb3R0b1N0YXRpc3RpY3MobG90dG9OdW1iZXJzLCBnZW5lcmF0ZWRMb3R0bykge1xuICAgIGNvbnN0IHsgd2lubmluZ051bWJlcnMsIGJvbnVzTnVtYmVyIH0gPSBsb3R0b051bWJlcnM7XG4gICAgY29uc3QgY291bnQgPSB0aGlzLmdldE1hdGNoZWROdW1iZXJzTGVuZ3RoKHdpbm5pbmdOdW1iZXJzLCBnZW5lcmF0ZWRMb3R0byk7XG5cbiAgICBpZiAoY291bnQgPT09IExPVFRPX1JVTEVTLmJvbnVzTWF0Y2hDb3VudCkge1xuICAgICAgdGhpcy4jaW5jcmVhc2VNYXRjaGVkRml2ZU9yQm9udXNOdW1iZXIoYm9udXNOdW1iZXIsIGdlbmVyYXRlZExvdHRvKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4jaW5jcmVhc2VNYXRjaGVkTnVtYmVyKGNvdW50KTtcbiAgfVxuXG4gICNjYWxjdWxhdGVBbGxMb3R0b1N0YXRpc3RpY3MobG90dG9OdW1iZXJzLCBnZW5lcmF0ZWRMb3R0b3MpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdlbmVyYXRlZExvdHRvcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy4jY2FsY3VsYXRlTG90dG9TdGF0aXN0aWNzKGxvdHRvTnVtYmVycywgZ2VuZXJhdGVkTG90dG9zW2ldKTtcbiAgICB9XG4gIH1cblxuICAjY2FsY3VsYXRlVG90YWxQcmljZSgpIHtcbiAgICBjb25zdCB0b3RhbFByaWNlID0gT2JqZWN0LmtleXMoTE9UVE9fU1RBVElTVElDUykucmVkdWNlKFxuICAgICAgKGFjYywga2V5KSA9PlxuICAgICAgICBhY2MgKyBMT1RUT19TVEFUSVNUSUNTW2tleV0ucHJpY2UgKiB0aGlzLiNsb3R0b1N0YXRpc3RpY3Nba2V5XSxcbiAgICAgIDAsXG4gICAgKTtcbiAgICByZXR1cm4gdG90YWxQcmljZTtcbiAgfVxuXG4gIGNhbGN1bGF0ZVRvdGFsUHJvZml0KHRpY2tldENvdW50KSB7XG4gICAgY29uc3QgdG90YWxQcmljZSA9IHRoaXMuI2NhbGN1bGF0ZVRvdGFsUHJpY2UoKTtcbiAgICBjb25zdCB0b3RhbFByb2ZpdCA9XG4gICAgICAodG90YWxQcmljZSAvICh0aWNrZXRDb3VudCAqIExPVFRPX1JVTEVTLmxvdHRvQmFzZVRpY2tldFByaWNlKSkgKiAwLjAxO1xuICAgIHJldHVybiAoXG4gICAgICBNYXRoLnJvdW5kKHRvdGFsUHJvZml0ICogTE9UVE9fUlVMRVMucm91bmRpbmdTdGFuZGFyZCkgL1xuICAgICAgTE9UVE9fUlVMRVMucm91bmRpbmdTdGFuZGFyZFxuICAgICk7XG4gIH1cblxuICBnZXQgbG90dG9TdGF0aXN0aWNzKCkge1xuICAgIHJldHVybiB0aGlzLiNsb3R0b1N0YXRpc3RpY3M7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTG90dG9DYWxjdWxhdG9yO1xuIiwiaW1wb3J0IExPVFRPX1NUQVRJU1RJQ1MgZnJvbSAnLi4vY29uc3RhbnRzL2xvdHRvLXN0YXRpc3RpY3MuanMnO1xuXG5jb25zdCBDT01QQVJFX0xPVFRPX0NPVU5UID0gJ2ZpdmVCb251cyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVXaW5uaW5nUmVzdWx0KGtleSwgY291bnQpIHtcbiAgY29uc3QgeyBudW1iZXIsIHByaWNlIH0gPSBMT1RUT19TVEFUSVNUSUNTW2tleV07XG4gIGNvbnN0IGJvbnVzVGV4dCA9IGtleSA9PT0gQ09NUEFSRV9MT1RUT19DT1VOVCA/ICcsIOuztOuEiOyKpCDsnbzsuZgnIDogJyc7XG5cbiAgcmV0dXJuIGAke251bWJlcn3qsJwg7J287LmYJHtib251c1RleHR9ICgke3ByaWNlLnRvTG9jYWxlU3RyaW5nKCl97JuQKSAtICR7Y291bnR96rCcYDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVdlYldpbm5pbmdSZXN1bHQoa2V5LCBjb3VudCkge1xuICBjb25zdCB7IG51bWJlciwgcHJpY2UgfSA9IExPVFRPX1NUQVRJU1RJQ1Nba2V5XTtcbiAgY29uc3QgYm9udXNUZXh0ID0ga2V5ID09PSBDT01QQVJFX0xPVFRPX0NPVU5UID8gJyArIOuztOuEiOyKpOuzvCcgOiAnJztcblxuICByZXR1cm4gYDx0cj48dGQ+JHtudW1iZXJ96rCcJHtib251c1RleHR9PC90ZD48dGQ+JHtwcmljZS50b0xvY2FsZVN0cmluZygpfeybkDwvdGQ+PHRkPiR7Y291bnR96rCcPC90ZD48L3RyPmA7XG59XG4iLCJpbXBvcnQgTE9UVE9fUlVMRVMgZnJvbSAnLi9sb3R0by1ydWxlcy5qcyc7XG5cbmV4cG9ydCBjb25zdCBJTlBVVF9NRVNTQUdFUyA9IHtcbiAgcHJlZml4OiAnPicsXG4gIGxvdHRvUHVyY2hhc2VQcmljZTogJ+q1rOyeheq4iOyVoeydhCDsnoXroKXtlbQg7KO87IS47JqULicsXG4gIHdpbm5pbmdOdW1iZXJzOiAn64u57LKoIOuyiO2YuOulvCDsnoXroKXtlbQg7KO87IS47JqULicsXG4gIGJvbnVzTnVtYmVyOiAn67O064SI7IqkIOuyiO2YuOulvCDsnoXroKXtlbQg7KO87IS47JqULicsXG4gIHJlc3RhcnQ6ICfri6Tsi5wg7Iuc7J6R7ZWY7Iuc6rKg7Iq164uI6rmMPyAoeS9uKScsXG59O1xuXG5leHBvcnQgY29uc3QgT1VUUFVUX01FU1NBR0VTID0ge1xuICB0aWNrZXRDb3VudChjb3VudCkge1xuICAgIHJldHVybiBgJHtjb3VudH3qsJzrpbwg6rWs66ek7ZaI7Iq164uI64ukLmA7XG4gIH0sXG4gIHdpbm5pbmdTdGF0aXN0aWNzOiAn64u57LKoIO2GteqzhCcsXG4gIHdpbm5pbmdTdGF0aXN0aWNzT3BlcmF0aW9uOiAnLS0tLS0tLS0tLS0tLS0tLS0tLS0nLFxuICB0b3RhbFByb2ZpdChwcm9maXQpIHtcbiAgICByZXR1cm4gYOy0nSDsiJjsnbXrpaDsnYAgJHtwcm9maXR9JeyeheuLiOuLpC5gO1xuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IEVSUk9SX01FU1NBR0VTID0ge1xuICBwcmVmaXg6ICdbRVJST1JdJyxcbiAgaW52YWxpZERpdmlkZWRVbml0OiBg6rWs7J6FIOq4iOyVoeydgCAke0xPVFRPX1JVTEVTLmxvdHRvQmFzZVRpY2tldFByaWNlfeybkCDri6jsnITroZwg64KY64iE7Ja0IOuWqOyWtOyguOyVvCDtlanri4jri6QuYCxcbiAgaW52YWxpZExlbmd0aDogYCR7TE9UVE9fUlVMRVMud2lubmluZ051bWJlcnNMZW5ndGh96rCc7J2YIOyIq+yekOulvCDsnoXroKXtlbQg7KO87IS47JqULmAsXG4gIGludmFsaWRSYW5nZTogYCR7TE9UVE9fUlVMRVMubWluTGVuZ3RofSB+ICR7TE9UVE9fUlVMRVMubWF4TGVuZ3RofSDsgqzsnbTsnZgg7Iir7J6Q66eMIOyeheugpe2VtCDso7zshLjsmpQuYCxcbiAgaW52YWxpZFVuaXF1ZU51bWJlcjogJ+ykkeuzteuQnCDsiKvsnpDripQg7J6F66Cl7ZWgIOyImCDsl4bsirXri4jri6QuJyxcbn07XG5cbmV4cG9ydCBjb25zdCBXRUJfTUVTU0FHRVMgPSB7XG4gIHRpY2tldEVtb2ppOiAn8J+On++4jycsXG4gIHRpY2tldENvdW50KGNvdW50KSB7XG4gICAgcmV0dXJuIGDstJ0gJHtjb3VudH3qsJzrpbwg6rWs66ek7ZaI7Iq164uI64ukLmA7XG4gIH0sXG4gIHRvdGFsUHJvZml0KHByb2ZpdCkge1xuICAgIHJldHVybiBg64u57Iug7J2YIOy0nSDsiJjsnbXrpaDsnYAgJHtwcm9maXR9JeyeheuLiOuLpC5gO1xuICB9LFxufTtcbiIsImltcG9ydCB7IGNyZWF0ZVdlYldpbm5pbmdSZXN1bHQgfSBmcm9tICcuLi91dGlscy9jcmVhdGVXaW5uaW5nUmVzdWx0LmpzJztcblxuaW1wb3J0IHsgV0VCX01FU1NBR0VTIH0gZnJvbSAnLi4vY29uc3RhbnRzL21lc3NhZ2VzLmpzJztcbmltcG9ydCBMT1RUT19TVEFUSVNUSUNTIGZyb20gJy4uL2NvbnN0YW50cy9sb3R0by1zdGF0aXN0aWNzLmpzJztcblxuY29uc3QgT3V0cHV0V2ViVmlldyA9IHtcbiAgZGlzcGxheVRpY2tldENvdW50KGNvdW50KSB7XG4gICAgcmV0dXJuIFdFQl9NRVNTQUdFUy50aWNrZXRDb3VudChjb3VudCk7XG4gIH0sXG5cbiAgZGlzcGxheUdlbmVyYXRlZExvdHRvcyhnZW5lcmF0ZWRMb3R0b3MpIHtcbiAgICByZXR1cm4gZ2VuZXJhdGVkTG90dG9zXG4gICAgICAubWFwKChsb3R0bykgPT4ge1xuICAgICAgICByZXR1cm4gYDxsaT4ke1dFQl9NRVNTQUdFUy50aWNrZXRFbW9qaX0gJHtsb3R0by5qb2luKCcsICcpfTwvbGk+YDtcbiAgICAgIH0pXG4gICAgICAuam9pbignJyk7XG4gIH0sXG5cbiAgZGlzcGxheVN0YXRpc3RpY3Moc3RhdGlzdGljcykge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhMT1RUT19TVEFUSVNUSUNTKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGtleXNcbiAgICAgIC5tYXAoKGtleSkgPT4gY3JlYXRlV2ViV2lubmluZ1Jlc3VsdChrZXksIHN0YXRpc3RpY3Nba2V5XSkpXG4gICAgICAuam9pbignJyk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuXG4gIGRpc3BsYXlUb3RhbFByb2ZpdCh0b3RhbFByb2ZpdCkge1xuICAgIHJldHVybiBXRUJfTUVTU0FHRVMudG90YWxQcm9maXQodG90YWxQcm9maXQpO1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgT3V0cHV0V2ViVmlldztcbiIsImltcG9ydCB7IEVSUk9SX01FU1NBR0VTIH0gZnJvbSAnLi4vY29uc3RhbnRzL21lc3NhZ2VzLmpzJztcbmltcG9ydCBMT1RUT19SVUxFUyBmcm9tICcuLi9jb25zdGFudHMvbG90dG8tcnVsZXMuanMnO1xuXG5jb25zdCBMb3R0b1ZhbGlkYXRvciA9IHtcbiAgdmFsaWRhdGVXaW5uaW5nTnVtYmVycyhudW1iZXJzKSB7XG4gICAgdGhpcy52YWxpZGF0ZUxlbmd0aChudW1iZXJzKTtcbiAgICB0aGlzLnZhbGlkYXRlVW5pcXVlTnVtYmVyKG51bWJlcnMpO1xuICAgIHRoaXMudmFsaWRhdGVXaW5uaW5nTnVtYmVyc1JhbmdlKG51bWJlcnMpO1xuICB9LFxuXG4gIHZhbGlkYXRlQm9udXNOdW1iZXIod2lubmluZ051bWJlcnMsIGJvbnVzTnVtYmVyKSB7XG4gICAgdGhpcy52YWxpZGF0ZVJhbmdlKGJvbnVzTnVtYmVyKTtcbiAgICB0aGlzLnZhbGlkYXRlVW5pcXVlTnVtYmVyKFsuLi53aW5uaW5nTnVtYmVycywgYm9udXNOdW1iZXJdKTtcbiAgfSxcblxuICBpc1ZhbGlkTGVuZ3RoKG51bWJlcnMpIHtcbiAgICByZXR1cm4gbnVtYmVycy5sZW5ndGggPT09IExPVFRPX1JVTEVTLndpbm5pbmdOdW1iZXJzTGVuZ3RoO1xuICB9LFxuXG4gIHZhbGlkYXRlTGVuZ3RoKG51bWJlcnMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZExlbmd0aChudW1iZXJzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgJHtFUlJPUl9NRVNTQUdFUy5wcmVmaXh9ICR7RVJST1JfTUVTU0FHRVMuaW52YWxpZExlbmd0aH1gLFxuICAgICAgKTtcbiAgICB9XG4gIH0sXG5cbiAgaXNWYWxpZFVuaXF1ZU51bWJlcihudW1iZXJzKSB7XG4gICAgcmV0dXJuIG5ldyBTZXQobnVtYmVycykuc2l6ZSA9PT0gbnVtYmVycy5sZW5ndGg7XG4gIH0sXG5cbiAgdmFsaWRhdGVVbmlxdWVOdW1iZXIobnVtYmVycykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkVW5pcXVlTnVtYmVyKG51bWJlcnMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGAke0VSUk9SX01FU1NBR0VTLnByZWZpeH0gJHtFUlJPUl9NRVNTQUdFUy5pbnZhbGlkVW5pcXVlTnVtYmVyfWAsXG4gICAgICApO1xuICAgIH1cbiAgfSxcblxuICBpc0luUmFuZ2UobnVtYmVyKSB7XG4gICAgcmV0dXJuIG51bWJlciA+PSBMT1RUT19SVUxFUy5taW5MZW5ndGggJiYgbnVtYmVyIDw9IExPVFRPX1JVTEVTLm1heExlbmd0aDtcbiAgfSxcblxuICB2YWxpZGF0ZVJhbmdlKG51bWJlcikge1xuICAgIGlmICghdGhpcy5pc0luUmFuZ2UobnVtYmVyKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgJHtFUlJPUl9NRVNTQUdFUy5wcmVmaXh9ICR7RVJST1JfTUVTU0FHRVMuaW52YWxpZFJhbmdlfWAsXG4gICAgICApO1xuICAgIH1cbiAgfSxcblxuICB2YWxpZGF0ZVdpbm5pbmdOdW1iZXJzUmFuZ2UobnVtYmVycykge1xuICAgIG51bWJlcnMuc29tZSgobnVtYmVyKSA9PiB0aGlzLnZhbGlkYXRlUmFuZ2UobnVtYmVyKSk7XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb3R0b1ZhbGlkYXRvcjtcbiIsImV4cG9ydCBmdW5jdGlvbiAkKHNlbGVjdG9yKSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uICQkKHNlbGVjdG9yKSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbn1cbiIsImltcG9ydCBMb3R0b0dlbmVyYXRvciBmcm9tICcuLi9kb21haW5zL0xvdHRvR2VuZXJhdG9yLmpzJztcbmltcG9ydCBMb3R0b0NhbGN1bGF0b3IgZnJvbSAnLi4vZG9tYWlucy9Mb3R0b0NhbGN1bGF0b3IuanMnO1xuXG5pbXBvcnQgT3V0cHV0V2ViVmlldyBmcm9tICcuLi92aWV3cy9PdXRwdXRXZWJWaWV3LmpzJztcblxuaW1wb3J0IExvdHRvVmFsaWRhdG9yIGZyb20gJy4uL3ZhbGlkYXRvcnMvTG90dG9WYWxpZGF0b3IuanMnO1xuXG5pbXBvcnQgeyAkLCAkJCB9IGZyb20gJy4uL3V0aWxzL2RvbS5qcyc7XG5cbmltcG9ydCBMT1RUT19SVUxFUyBmcm9tICcuLi9jb25zdGFudHMvbG90dG8tcnVsZXMuanMnO1xuXG5jbGFzcyBMb3R0b1dlYkNvbnRyb2xsZXIge1xuICAjdGlja2V0Q291bnQ7XG4gICNnZW5lcmF0ZWRMb3R0b3M7XG4gICNsb3R0b051bWJlcnM7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy4jbG90dG9OdW1iZXJzID0ge1xuICAgICAgd2lubmluZ051bWJlcnM6IG51bGwsXG4gICAgICBib251c051bWJlcjogbnVsbCxcbiAgICB9O1xuXG4gICAgdGhpcy5pbml0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIGluaXRFdmVudExpc3RlbmVycygpIHtcbiAgICAkKCcjY2xvc2UtYnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlTW9kYWwuYmluZCh0aGlzKSk7XG4gICAgJCgnI21vZGFsLXdyYXBwZXInKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xvc2VNb2RhbC5iaW5kKHRoaXMpKTtcbiAgICAkKCcjbG90dG8tcHVyY2hhc2UtZm9ybScpLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAnc3VibWl0JyxcbiAgICAgIHRoaXMuaGFuZGxlTG90dG9QdXJjaGFzZVN1Ym1pdC5iaW5kKHRoaXMpLFxuICAgICk7XG4gICAgJCgnI2xvdHRvLW51bWJlcnMtZm9ybScpLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAnc3VibWl0JyxcbiAgICAgIHRoaXMuaGFuZGxlTG90dG9OdW1iZXJzU3VibWl0LmJpbmQodGhpcyksXG4gICAgKTtcbiAgICAkKCcjcmVzdGFydC1idXR0b24nKS5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgIHRoaXMuaGFuZGxlUmVzdGFydEJ1dHRvbi5iaW5kKHRoaXMpLFxuICAgICk7XG4gIH1cblxuICBoYW5kbGVMb3R0b1B1cmNoYXNlU3VibWl0KGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNvbnN0IHB1cmNoYXNlUHJpY2UgPSAkKCcjbG90dG8tcHVyY2hhc2UtaW5wdXQnKS52YWx1ZTtcblxuICAgIC8qKlxuICAgICAqIDzqs6Drr7w+XG4gICAgICog6rWs7J6FIOuyhO2KvOydhCDriITrpbTquLAg7KCE7JeQIGh0bWwgaW5wdXQg7YOc6re47J2YIHN0ZXAg7IaN7ISx7Jy866GcIDEsMDAw7JuQIOuLqOychOydmCDsnoXroKXsnbjsp4Ag6rKA7Kad7J20IOqwgOuKpe2VmOuLpC5cbiAgICAgKiDrmJDtlZwgbnVtYmVyIHR5cGUsIG1pbiwgbWF4IOqwkuuPhCDqsoDspp3snbQg6rCA64ql7ZWY64ukLlxuICAgICAqIOKGkiBMb3R0b1B1cmNoYXNlUHJpY2VWYWxpZGF0b3IudmFsaWRhdGUocHVyY2hhc2VQcmljZSnrpbwg7IKs7Jqp7ZW07JW8IO2VoOq5jD8g7YOc6re47J2YIOyGjeyEseydhCDsnpgg7Zmc7Jqp7ZWY64qUIOqyg+ydtCDrjZQg7KKL7J2AIOuwqeuyleydtCDslYTri5DquYw/XG4gICAgICovXG5cbiAgICB0aGlzLiN0aWNrZXRDb3VudCA9IHRoaXMuZ2V0VGlja2V0Q291bnQocHVyY2hhc2VQcmljZSk7XG5cbiAgICB0aGlzLmdlbmVyYXRlTG90dG9zKCk7XG4gICAgdGhpcy5kaXNwbGF5R2VuZXJhdGVkTG90dG9JbmZvKCk7XG4gICAgJCgnI2hpZGRlbi1mb3JtJykuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuLWZvcm0nKTtcbiAgfVxuXG4gIGdldFRpY2tldENvdW50KGxvdHRvUHVyY2hhc2VQcmljZSkge1xuICAgIHJldHVybiBsb3R0b1B1cmNoYXNlUHJpY2UgLyBMT1RUT19SVUxFUy5sb3R0b0Jhc2VUaWNrZXRQcmljZTtcbiAgfVxuXG4gIGdlbmVyYXRlTG90dG9zKCkge1xuICAgIGNvbnN0IGxvdHRvR2VuZXJhdG9yID0gbmV3IExvdHRvR2VuZXJhdG9yKHRoaXMuI3RpY2tldENvdW50KTtcbiAgICB0aGlzLiNnZW5lcmF0ZWRMb3R0b3MgPSBsb3R0b0dlbmVyYXRvci5nZW5lcmF0ZWRMb3R0b3M7XG4gIH1cblxuICBkaXNwbGF5VGlja2V0Q291bnQoKSB7XG4gICAgJCgnI3RvdGFsLXRpY2tldC1jb3VudCcpLnRleHRDb250ZW50ID0gT3V0cHV0V2ViVmlldy5kaXNwbGF5VGlja2V0Q291bnQoXG4gICAgICB0aGlzLiN0aWNrZXRDb3VudCxcbiAgICApO1xuICB9XG4gIGRpc3BsYXlHZW5lcmF0ZWRMb3R0b3MoKSB7XG4gICAgJCgnI2dlbmVyYXRlZC1sb3R0by1jb250ZW50cycpLmlubmVySFRNTCA9XG4gICAgICBPdXRwdXRXZWJWaWV3LmRpc3BsYXlHZW5lcmF0ZWRMb3R0b3ModGhpcy4jZ2VuZXJhdGVkTG90dG9zKTtcbiAgfVxuXG4gIGRpc3BsYXlHZW5lcmF0ZWRMb3R0b0luZm8oKSB7XG4gICAgdGhpcy5kaXNwbGF5VGlja2V0Q291bnQoKTtcbiAgICB0aGlzLmRpc3BsYXlHZW5lcmF0ZWRMb3R0b3MoKTtcbiAgfVxuXG4gIGhhbmRsZUxvdHRvTnVtYmVyc1N1Ym1pdChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB0aGlzLnNldExvdHRvTnVtYmVycygpO1xuICAgIGNvbnN0IGlzUGFzcyA9IHRoaXMudmFsaWRhdGVMb3R0b051bWJlcnMoKTtcbiAgICBpZiAoaXNQYXNzKSB7XG4gICAgICB0aGlzLm9wZW5Nb2RhbCgpO1xuICAgICAgdGhpcy5jYWxjdWxhdGVBbmRTaG93UmVzdWx0cygpO1xuICAgIH1cbiAgfVxuXG4gIHNldExvdHRvTnVtYmVycygpIHtcbiAgICB0aGlzLiNsb3R0b051bWJlcnMud2lubmluZ051bWJlcnMgPSBBcnJheS5mcm9tKFxuICAgICAgJCQoJy5sb3R0by1udW1iZXItaW5wdXQnKSxcbiAgICApLm1hcCgoaW5wdXQpID0+IE51bWJlcihpbnB1dC52YWx1ZSkpO1xuXG4gICAgdGhpcy4jbG90dG9OdW1iZXJzLmJvbnVzTnVtYmVyID0gTnVtYmVyKCQoJyNib251cy1udW1iZXItaW5wdXQnKS52YWx1ZSk7XG4gIH1cblxuICB2YWxpZGF0ZUxvdHRvTnVtYmVycygpIHtcbiAgICB0cnkge1xuICAgICAgTG90dG9WYWxpZGF0b3IudmFsaWRhdGVXaW5uaW5nTnVtYmVycyh0aGlzLiNsb3R0b051bWJlcnMud2lubmluZ051bWJlcnMpO1xuICAgICAgTG90dG9WYWxpZGF0b3IudmFsaWRhdGVCb251c051bWJlcihcbiAgICAgICAgdGhpcy4jbG90dG9OdW1iZXJzLndpbm5pbmdOdW1iZXJzLFxuICAgICAgICB0aGlzLiNsb3R0b051bWJlcnMuYm9udXNOdW1iZXIsXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgYWxlcnQoZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgb3Blbk1vZGFsKCkge1xuICAgICQoJyNtb2RhbC13cmFwcGVyJykuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuLW1vZGFsJyk7XG4gICAgJCgnI21vZGFsLXdyYXBwZXInKS5jbGFzc0xpc3QuYWRkKCdtb2RhbC13cmFwcGVyJyk7XG4gIH1cblxuICBjbG9zZU1vZGFsKCkge1xuICAgICQoJyNtb2RhbC13cmFwcGVyJykuY2xhc3NMaXN0LmFkZCgnaGlkZGVuLW1vZGFsJyk7XG4gICAgJCgnI21vZGFsLXdyYXBwZXInKS5jbGFzc0xpc3QucmVtb3ZlKCdtb2RhbC13cmFwcGVyJyk7XG4gIH1cblxuICBjYWxjdWxhdGVBbmRTaG93UmVzdWx0cygpIHtcbiAgICBjb25zdCBsb3R0b0NhbGN1bGF0b3IgPSBuZXcgTG90dG9DYWxjdWxhdG9yKFxuICAgICAgdGhpcy4jbG90dG9OdW1iZXJzLFxuICAgICAgdGhpcy4jZ2VuZXJhdGVkTG90dG9zLFxuICAgICk7XG5cbiAgICB0aGlzLnNob3dMb3R0b1N0YXRpc3RpY3MobG90dG9DYWxjdWxhdG9yKTtcbiAgfVxuXG4gIHNob3dMb3R0b1N0YXRpc3RpY3MobG90dG9DYWxjdWxhdG9yKSB7XG4gICAgdGhpcy5zaG93U3RhdGlzdGljcyhsb3R0b0NhbGN1bGF0b3IpO1xuICAgIHRoaXMuc2hvd1RvdGFsUHJvZml0KGxvdHRvQ2FsY3VsYXRvcik7XG4gIH1cblxuICBzaG93U3RhdGlzdGljcyhsb3R0b0NhbGN1bGF0b3IpIHtcbiAgICBjb25zdCBsb3R0b1N0YXRpc3RpY3MgPSBsb3R0b0NhbGN1bGF0b3IubG90dG9TdGF0aXN0aWNzO1xuXG4gICAgJCgnI2xvdHRvLXN0YXRpc3RpY3MtdGJvZHknKS5pbm5lckhUTUwgPVxuICAgICAgT3V0cHV0V2ViVmlldy5kaXNwbGF5U3RhdGlzdGljcyhsb3R0b1N0YXRpc3RpY3MpO1xuICB9XG5cbiAgc2hvd1RvdGFsUHJvZml0KGxvdHRvQ2FsY3VsYXRvcikge1xuICAgIGNvbnN0IHRvdGFsUHJvZml0ID0gbG90dG9DYWxjdWxhdG9yLmNhbGN1bGF0ZVRvdGFsUHJvZml0KHRoaXMuI3RpY2tldENvdW50KTtcblxuICAgICQoJyNwcm9maXQtdGV4dCcpLnRleHRDb250ZW50ID1cbiAgICAgIE91dHB1dFdlYlZpZXcuZGlzcGxheVRvdGFsUHJvZml0KHRvdGFsUHJvZml0KTtcbiAgfVxuXG4gIGhhbmRsZVJlc3RhcnRCdXR0b24oKSB7XG4gICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTG90dG9XZWJDb250cm9sbGVyO1xuIiwiLyoqXG4gKiBzdGVwIDLsnZgg7Iuc7J6R7KCQ7J20IOuQmOuKlCDtjIzsnbzsnoXri4jri6QuXG4gKiDrhbjrk5wg7ZmY6rK97JeQ7IScIOyCrOyaqe2VmOuKlCByZWFkbGluZSDrk7HsnYQg67aI65+s7JisIOqyveyasCDsoJXsg4HsoIHsnLzroZwg67mM65Oc7ZWgIOyImCDsl4bsirXri4jri6QuXG4gKi9cblxuaW1wb3J0IExvdHRvV2ViQ29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXJzL0xvdHRvV2ViQ29udHJvbGxlci5qcyc7XG5cbm5ldyBMb3R0b1dlYkNvbnRyb2xsZXIoKTtcbiJdLCJuYW1lcyI6WyJtaW5MZW5ndGgiLCJtYXhMZW5ndGgiLCJ3aW5uaW5nTnVtYmVyc0xlbmd0aCIsImJvbnVzTWF0Y2hDb3VudCIsImxvdHRvQmFzZVRpY2tldFByaWNlIiwicm91bmRpbmdTdGFuZGFyZCIsInJlc3RhcnQiLCJfZ2VuZXJhdGVkTG90dG9zIiwiV2Vha01hcCIsIl9nZW5lcmF0ZUxvdHRvc0J5VGlja2V0Q291bnQiLCJXZWFrU2V0IiwiTG90dG9HZW5lcmF0b3IiLCJ0aWNrZXRDb3VudCIsIl9jbGFzc0NhbGxDaGVjayIsIndyaXRhYmxlIiwidmFsdWUiLCJfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYyIsInRoaXMiLCJfY2xhc3NQcml2YXRlTWV0aG9kR2V0IiwiX2dlbmVyYXRlTG90dG9zQnlUaWNrZXRDb3VudDIiLCJjYWxsIiwia2V5IiwiTE9UVE9fUlVMRVMiLCJsb3R0b1NldCIsIlNldCIsInNpemUiLCJyYW5kb21OdW1iZXIiLCJtaW4iLCJtYXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJhZGQiLCJBcnJheSIsImZyb20iLCJzb3J0IiwiYSIsImIiLCJnZXQiLCJfdGhpcyIsImxlbmd0aCIsImdlbmVyYXRlTG90dG8iLCJ0aHJlZSIsInByaWNlIiwibnVtYmVyIiwiZm91ciIsImZpdmUiLCJmaXZlQm9udXMiLCJzaXgiLCJfbG90dG9TdGF0aXN0aWNzIiwiX2luY3JlYXNlTWF0Y2hlZE51bWJlciIsIl9pbmNyZWFzZU1hdGNoZWRGaXZlT3JCb251c051bWJlciIsIl9jYWxjdWxhdGVMb3R0b1N0YXRpc3RpY3MiLCJfY2FsY3VsYXRlQWxsTG90dG9TdGF0aXN0aWNzIiwiX2NhbGN1bGF0ZVRvdGFsUHJpY2UiLCJMb3R0b0NhbGN1bGF0b3IiLCJsb3R0b051bWJlcnMiLCJnZW5lcmF0ZWRMb3R0b3MiLCJfY2xhc3NQcml2YXRlTWV0aG9kSW5pdFNwZWMiLCJfY2xhc3NQcml2YXRlRmllbGRTZXQiLCJfY2FsY3VsYXRlQWxsTG90dG9TdGF0aXN0aWNzMiIsIndpbm5pbmdOdW1iZXJzIiwiZ2VuZXJhdGVkTG90dG8iLCJmaWx0ZXIiLCJ3aW5uaW5nTnVtYmVyIiwiaW5jbHVkZXMiLCJib251c051bWJlciIsInRvdGFsUHJvZml0IiwiX2NhbGN1bGF0ZVRvdGFsUHJpY2UyIiwicm91bmQiLCJfY2xhc3NQcml2YXRlRmllbGRHZXQiLCJfaW5jcmVhc2VNYXRjaGVkTnVtYmVyMiIsIk9iamVjdCIsImtleXMiLCJMT1RUT19TVEFUSVNUSUNTIiwiZm9yRWFjaCIsIl9pbmNyZWFzZU1hdGNoZWRGaXZlT3JCb251c051bWJlcjIiLCJpc0VxdWFsQm9udXNOdW1iZXIiLCJfY2FsY3VsYXRlTG90dG9TdGF0aXN0aWNzMiIsImNvdW50IiwiZ2V0TWF0Y2hlZE51bWJlcnNMZW5ndGgiLCJpIiwiX3RoaXMyIiwicmVkdWNlIiwiYWNjIiwiRVJST1JfTUVTU0FHRVMiLCJwcmVmaXgiLCJpbnZhbGlkRGl2aWRlZFVuaXQiLCJjb25jYXQiLCJpbnZhbGlkTGVuZ3RoIiwiaW52YWxpZFJhbmdlIiwiaW52YWxpZFVuaXF1ZU51bWJlciIsIldFQl9NRVNTQUdFUyIsIm1hcCIsImxvdHRvIiwiam9pbiIsInN0YXRpc3RpY3MiLCJfTE9UVE9fU1RBVElTVElDUyRrZXkyIiwiYm9udXNUZXh0IiwidG9Mb2NhbGVTdHJpbmciLCJjcmVhdGVXZWJXaW5uaW5nUmVzdWx0IiwidmFsaWRhdGVXaW5uaW5nTnVtYmVycyIsIm51bWJlcnMiLCJ2YWxpZGF0ZUxlbmd0aCIsInZhbGlkYXRlVW5pcXVlTnVtYmVyIiwidmFsaWRhdGVXaW5uaW5nTnVtYmVyc1JhbmdlIiwidmFsaWRhdGVCb251c051bWJlciIsInZhbGlkYXRlUmFuZ2UiLCJpc1ZhbGlkTGVuZ3RoIiwiRXJyb3IiLCJpc1ZhbGlkVW5pcXVlTnVtYmVyIiwiaXNJblJhbmdlIiwic29tZSIsIiQiLCJzZWxlY3RvciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIl90aWNrZXRDb3VudCIsIl9sb3R0b051bWJlcnMiLCJMb3R0b1dlYkNvbnRyb2xsZXIiLCJpbml0RXZlbnRMaXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xvc2VNb2RhbCIsImJpbmQiLCJoYW5kbGVMb3R0b1B1cmNoYXNlU3VibWl0IiwiaGFuZGxlTG90dG9OdW1iZXJzU3VibWl0IiwiaGFuZGxlUmVzdGFydEJ1dHRvbiIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJwdXJjaGFzZVByaWNlIiwiZ2V0VGlja2V0Q291bnQiLCJnZW5lcmF0ZUxvdHRvcyIsImRpc3BsYXlHZW5lcmF0ZWRMb3R0b0luZm8iLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJsb3R0b1B1cmNoYXNlUHJpY2UiLCJsb3R0b0dlbmVyYXRvciIsInRleHRDb250ZW50IiwiT3V0cHV0V2ViVmlldyIsImlubmVySFRNTCIsImRpc3BsYXlUaWNrZXRDb3VudCIsImRpc3BsYXlHZW5lcmF0ZWRMb3R0b3MiLCJzZXRMb3R0b051bWJlcnMiLCJ2YWxpZGF0ZUxvdHRvTnVtYmVycyIsIm9wZW5Nb2RhbCIsImNhbGN1bGF0ZUFuZFNob3dSZXN1bHRzIiwicXVlcnlTZWxlY3RvckFsbCIsImlucHV0IiwiTnVtYmVyIiwiTG90dG9WYWxpZGF0b3IiLCJlcnJvciIsImFsZXJ0IiwibWVzc2FnZSIsImxvdHRvQ2FsY3VsYXRvciIsInNob3dMb3R0b1N0YXRpc3RpY3MiLCJzaG93U3RhdGlzdGljcyIsInNob3dUb3RhbFByb2ZpdCIsImxvdHRvU3RhdGlzdGljcyIsImNhbGN1bGF0ZVRvdGFsUHJvZml0IiwibG9jYXRpb24iLCJyZWxvYWQiXSwic291cmNlUm9vdCI6IiJ9